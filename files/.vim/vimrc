set flp=\\v^\\s*[[(]?(\\d+\|\\a\|[IiVvXxLlCcDdMm]+)[]:.)]\\s+
set ai bs=2 cm=blowfish2 cot=menu cpo+=M enc=utf-8 et fcl=all fo+=jn hls ic
set lcs+=nbsp:~,tab:‚Ä£‚Äß,trail:‚Äß ml mls=1 mps+=<:> nf-=octal rdt=750 ru ruf=%l:%c
set sc scs scl=no sts=4 sw=1 ttm=100 ttimeout ut=2000 ww=h,l,[,]

if $COLORTERM == 'truecolor' || $COLORTERM == '24bit'
    set termguicolors
endif

set spl=en sps=best,13 spc= spf=~/.vim/spell/words.utf-8.add
for f in sort(glob('~/.vim/spell/*.add', 1, 1))
    if filereadable(f)
        if fnamemodify(f, ":t") != "words.utf-8.add"
            let &spf .= ',' . f
        endif
        if !filereadable(f . '.spl') || getftime(f) > getftime(f . '.spl')
            silent execute 'mkspell! ' . fnameescape(f)
        endif
    endif
endfor

au BufReadCmd *.crate call tar#Browse(expand("<amatch>"))
au BufWinEnter * if getfsize(expand("%")) > 1024*1024 | syntax clear | endif

if v:versionlong < 9011271
    au BufReadCmd *.whl call zip#Browse(expand("<amatch>"))
endif

dig uh     601  " …ô (U+0259)
dig y-     563  " »≥ (U+0233)
dig Y-     562  " »≤ (U+0232)
dig zh     658  "  í (U+0292)
dig sh     643  "  É (U+0283)
dig dh     240  " √∞ (U+00F0)
dig DH     208  " √ê (U+00D0)
dig !?    8253  " ‚ÄΩ (U+203D)
dig ::     776  " ‚óåÃà (U+0308)
dig ^1     185  " ¬π (U+00B9)
dig ^2     178  " ¬≤ (U+00B2)
dig ^3     179  " ¬≥ (U+00B3)
dig ^4    8308  " ‚Å¥ (U+2074)
dig ^5    8309  " ‚Åµ (U+2075)
dig ^6    8310  " ‚Å∂ (U+2076)
dig ^7    8311  " ‚Å∑ (U+2077)
dig ^8    8312  " ‚Å∏ (U+2078)
dig ^9    8313  " ‚Åπ (U+2079)
dig ^0    8304  " ‚Åπ (U+2079)
dig ^n    8319  " ‚Åø (U+207F)
dig ^+    8314  " ‚Å∫ (U+207A)
dig ^-    8315  " ‚Åª (U+207B)
dig _1    8321  " ‚ÇÅ (U+2081)
dig _2    8322  " ‚ÇÇ (U+2082)
dig _3    8323  " ‚ÇÉ (U+2083)
dig _4    8324  " ‚ÇÑ (U+2084)
dig _5    8325  " ‚ÇÖ (U+2085)
dig _6    8326  " ‚ÇÜ (U+2086)
dig _7    8327  " ‚Çá (U+2087)
dig _8    8328  " ‚Çà (U+2088)
dig _9    8329  " ‚Çâ (U+2089)
dig _0    8320  " ‚ÇÄ (U+2080)
dig _+    8330  " ‚Çä (U+208A)
dig _-    8331  " ‚Çã (U+208B)
dig NN    8469  " ‚Ñï (U+2115)
dig ZZ    8484  " ‚Ñ§ (U+2124)
dig QQ    8474  " ‚Ñö (U+211A)
dig RR    8477  " ‚Ñù (U+211D)
dig CC    8450  " ‚ÑÇ (U+2102)
dig HH    8461  " ‚Ñç (U+210D)
dig PP    8473  " ‚Ñô (U+2119)
dig PW  119979  " ùí´ (U+1D4AB)
dig &&    8743  " ‚àß (U+2227)
dig \|\|  8744  " ‚à® (U+2228)
dig !!     172  " ¬¨ (U+00AC)
dig ^^    8853  " ‚äï (U+2295)
dig (<   10216  " ‚ü® (U+27E8)
dig >)   10217  " ‚ü© (U+27E9)
dig (/    8713  " ‚àâ (U+2209)
dig x\|   8906  " ‚ãä (U+22CA)
dig NE    8708  " ‚àÑ (U+2204)
dig ~=    8773  " ‚âÖ (U+2245)
dig ~~    8776  " ‚âà (U+2248)
dig T^    8868  " ‚ä§ (U+22A4)
dig \|-   8866  " ‚ä¢ (U+22A2)
dig v\|   8595  " ‚Üì (U+2193)
dig ^\|   8593  " ‚Üë (U+2191)
dig \\    8726  " ‚àñ (U+2216)
dig dx   10799  " ‚®Ø (U+2A2F)
dig _.    8228  " ‚Ä§ (U+2024)
dig ..    8230  " ‚Ä¶ (U+2026)
dig )<    8828  " ‚âº (U+227C)

map S 24k
map s 24j
map W <C-W>w
map \- :exe "normal " . (81-col("$")) . "A-\e"<CR>
map \= :exe "normal " . (81-col("$")) . "A=\e"<CR>
cmap <C-A> <C-B>

let loaded_matchparen=1
filetype plugin on
syntax on
colorscheme jwodder

" Prevent ftplugins from overriding some values:
autocmd Filetype * setl sw=1 ts=8

command -nargs=1 Sp :sp `=system("pim -l " . shellescape(<q-args>))`
" <https://vi.stackexchange.com/a/10528/1044>
command ClearRegisters for i in range(34,122) | silent! call setreg(nr2char(i), []) | endfor

if empty(glob('~/.vim/autoload/plug.vim'))
    silent execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
    autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')
Plug 'dense-analysis/ale'
" Install vim-plug as a plugin in order to get the documentation:
Plug 'junegunn/vim-plug'
Plug 'knatsakis/deb.vim'
if has('python3')
    Plug 'mgedmin/coverage-highlight.vim'
endif
Plug 'ntpeters/vim-better-whitespace'
call plug#end()
filetype indent off

runtime! plugconf/*.vim

" Show syntax highlighting groups for word under cursor
" <https://stackoverflow.com/a/7893500/744178>
nmap gs :call <SID>SynStack()<CR>
function! <SID>SynStack()
    if !exists("*synstack")
        return
    endif
    echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

if stridx(environ()['TERM'], 'screen') == 0
    " These assume the outer terminal is xterm-compatible.
    " Sequence for querying background color for setting 'bg':
    let &t_RB="\<ESC>P\<ESC>]11;?\<C-G>\<ESC>\\"
    " Bracketed paste:
    " Screen may eventually support this natively:
    "   <https://savannah.gnu.org/bugs/?62102>
    " Debian's screen is patched to support this as of 4.9.0-4 (Debian:
    "   bookworm onwards; Ubuntu: lunar onwards)
    let &t_BE="\<ESC>P\<ESC>[?2004h\<ESC>\\"
    let &t_BD="\<ESC>P\<ESC>[?2004l\<ESC>\\"
    let &t_PS="\<ESC>[200~"
    let &t_PE="\<ESC>[201~"
endif

if stridx(environ()['TERM'], 'tmux') == 0
    " Sequence for querying background color for setting 'bg':
    let &t_RB="\<ESC>]11;?\<ESC>\\"
endif
